---
title: "title"
author: "author"
date: "date"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

**Due 11/9 at 5:00PM Central. Worth 100 points + 10 points extra credit.**

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1 (name and cnet ID):
    - Partner 2 (name and cnet ID):
3. Partner 1 will accept the `ps5` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: \*\*\_\_\*\* \*\*\_\_\*\*
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: \*\*\_\_\*\* Late coins left after submission: \*\*\_\_\*\*
7. Knit your `ps5.qmd` to an PDF file to make `ps5.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps5.qmd` and `ps5.pdf` to your github repo.
9. (Partner 1): submit `ps5.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

\newpage

```{python}
import pandas as pd
import altair as alt
import time

import warnings 
warnings.filterwarnings('ignore')
alt.renderers.enable("png")

from datetime import datetime
```


## Step 1: Develop initial scraper and crawler

### 1. Scraping (PARTNER 1)

```{python}
import requests
from bs4 import BeautifulSoup
import pandas as pd

url = 'https://oig.hhs.gov/fraud/enforcement/'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

titles = []
dates = []
links = []
categories = []

enforcement_items = soup.find_all('li', class_='usa-card card--list pep-card--minimal mobile:grid-col-12')

for item in enforcement_items:
    title_tag = item.find('h2', class_='usa-card__heading')
    title = title_tag.get_text(strip=True)
    titles.append(title)

    date_tag = item.find('span', class_='text-base-dark padding-right-105')
    date = date_tag.get_text(strip=True) 
    dates.append(date)

    category_tag = item.find('li', class_='display-inline-block usa-tag text-no-lowercase text-base-darkest bg-base-lightest margin-right-1')
    category = category_tag.get_text(strip=True)
    categories.append(category)

    link_tag = title_tag.find('a', href=True) 
    link = link_tag['href'] if link_tag else 'N/A'
    if not link.startswith('http'):
        full_link = f'https://oig.hhs.gov{link}'
    else:
        full_link = link
    links.append(full_link)

df = pd.DataFrame({
    'Title': titles,
    'Date': dates,
    'Category': categories,
    'Link': links
})

print(df.head())

```

  
### 2. Crawling (PARTNER 1)

```{python}
import time

agencies = []

for full_link in links:
    action_response = requests.get(full_link)
    action_response.raise_for_status()
    action_soup = BeautifulSoup(action_response.text, 'html.parser')

    agency_tag = action_soup.find('span', string='Agency:')
    if agency_tag:
        agency = agency_tag.find_parent('li').get_text(
            strip=True).replace('Agency:', '').strip()
    else:
        agency = 'N/A'

    agencies.append(agency)

    time.sleep(1)

df = pd.DataFrame({
    'Title': titles,
    'Date': dates,
    'Category': categories,
    'Link': links,
    'Agency': agencies
})

print(df.head())


```

## Step 2: Making the scraper dynamic

### 1. Turning the scraper into a function 

* a. Pseudo-Code (PARTNER 2)

# Ans:
1. Input Validation:
   Check if the provided `start_year` is greater than or equal to 2013. If not, display an error message and terminate the function.

2. Initialization:
   Initialize empty lists to store scraped data (e.g., titles, dates, links, and categories). Define the base URL of the website and set `page_number` to start from the first page.

3. Date Handling: 
   Retrieve the current date and convert the input start month and year into a `datetime` object for filtering purposes.

4. Loop for Scraping: 
   Use a `while` loop to process pages:
   - Construct the URL for the current page.
   - Send an HTTP GET request and check the response status.
   - Parse the HTML content using BeautifulSoup.
   - Locate all enforcement items on the page.

5. Data Extraction:
   For each enforcement item:
   - Extract the title, date, category, and link (if available).
   - Skip entries where the date is earlier than the specified start date.
   - Append valid data to the corresponding lists.

6. Breaking Conditions:
   If no enforcement items are found on the page, or if all data on the page is invalid, terminate the scraping process.

7. Add Delay:
   Add a delay (e.g., `time.sleep(1)`) between requests to prevent server overload or blocking.

8. Data Saving:
   After the loop, create a DataFrame with the collected data and save it as a CSV file. The filename should include the `start_year` and `start_month`.

9. Completion Message:  
   Print a message indicating that the scraping is complete, showing the total number of records saved.


* b. Create Dynamic Scraper (PARTNER 2)

```{python}
def scrape_enforcement_actions(start_month, start_year, end_page=480):
    if start_year < 2013:
        print("Year must be >= 2013. Please provide a valid year.")
        return

    titles, dates, links, categories = [], [], [], []

    base_url = "https://oig.hhs.gov/fraud/enforcement/"
    page_number = 1

    today = datetime.today()

    while page_number <= end_page:
        url = f"{base_url}?page={page_number}"
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        enforcement_items = soup.find_all(
            "li", class_="usa-card card--list pep-card--minimal mobile:grid-col-12"
        )

        if not enforcement_items:
            print(f"No enforcement items found on page {page_number}. Stopping.")
            break

        valid_data_found = False

        for item in enforcement_items:
            title_tag = item.find("h2", class_="usa-card__heading")
            date_tag = item.find("span", class_="text-base-dark padding-right-105")

            if not title_tag or not date_tag:
                continue

            title = title_tag.get_text(strip=True)
            date = date_tag.get_text(strip=True)
            date_obj = datetime.strptime(date, "%B %d, %Y")

            if date_obj < datetime(start_year, start_month, 1):
                continue

            valid_data_found = True

            titles.append(title)
            dates.append(date)

            category = item.find(
                "li",
                class_="display-inline-block usa-tag text-no-lowercase text-base-darkest bg-base-lightest margin-right-1",
            )
            category_text = category.get_text(strip=True) if category else "N/A"
            categories.append(category_text)

            link = item.find("a", href=True)["href"]
            full_link = f"https://oig.hhs.gov{link}"
            links.append(full_link)

        if not valid_data_found:
            print(f"No valid data found on page {page_number}. Stopping.")
            break

        time.sleep(1)

        page_number += 1

    df = pd.DataFrame(
        {"Title": titles, "Date": dates, "Category": categories, "Link": links}
    )

    filename = f"enforcement_actions_{start_year}_{start_month}_to_present.csv"
    df.to_csv(filename, index=False)

    print(f"Scraping complete. Data saved to {filename}. Total records: {len(df)}")


scrape_enforcement_actions(1, 2023, end_page=480)
```


* c. Test Partner's Code (PARTNER 1)

```{python}

def scrape_enforcement_actions(start_month, start_year, end_page=480):
    if start_year < 2013:
        print("Year must be >= 2013. Please provide a valid year.")
        return

    titles, dates, links, categories = [], [], [], []

    base_url = "https://oig.hhs.gov/fraud/enforcement/"
    page_number = 1

    today = datetime.today()

    while page_number <= end_page:
        url = f"{base_url}?page={page_number}"
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        enforcement_items = soup.find_all(
            "li", class_="usa-card card--list pep-card--minimal mobile:grid-col-12"
        )

        if not enforcement_items:
            print(f"No enforcement items found on page {page_number}. Stopping.")
            break

        valid_data_found = False

        for item in enforcement_items:
            title_tag = item.find("h2", class_="usa-card__heading")
            date_tag = item.find("span", class_="text-base-dark padding-right-105")

            if not title_tag or not date_tag:
                continue

            title = title_tag.get_text(strip=True)
            date = date_tag.get_text(strip=True)
            date_obj = datetime.strptime(date, "%B %d, %Y")

            if date_obj < datetime(start_year, start_month, 1):
                continue

            valid_data_found = True

            titles.append(title)
            dates.append(date)

            category = item.find(
                "li",
                class_="display-inline-block usa-tag text-no-lowercase text-base-darkest bg-base-lightest margin-right-1",
            )
            category_text = category.get_text(strip=True) if category else "N/A"
            categories.append(category_text)

            link = item.find("a", href=True)["href"]
            full_link = f"https://oig.hhs.gov{link}"
            links.append(full_link)

        if not valid_data_found:
            print(f"No valid data found on page {page_number}. Stopping.")
            break

        time.sleep(1)

        page_number += 1

    df = pd.DataFrame(
        {"Title": titles, "Date": dates, "Category": categories, "Link": links}
    )

    filename = f"enforcement_actions_{start_year}_{start_month}_to_present.csv"
    df.to_csv(filename, index=False)

    print(f"Scraping complete. Data saved to {filename}. Total records: {len(df)}")


scrape_enforcement_actions(1, 2021, end_page=480)

filename = "enforcement_actions_2021_1_to_present.csv"
df = pd.read_csv(filename)

total_actions = len(df)
print(f"Total number of enforcement actions scraped: {total_actions}")

earliest_action = df.iloc[-1]
print(f"Earliest enforcement action: Date - {earliest_action['Date']}, Title - {earliest_action['Title']}, Link - {earliest_action['Link']}")

```

## Step 3: Plot data based on scraped data

### 1. Plot the number of enforcement actions over time (PARTNER 2)

```{python}
import pandas as pd
import matplotlib.pyplot as plt

file_path = "/Users/hahei/Desktop/problem-set-5-xy-wz/enforcement_actions_2021_1_to_present.csv"

data = pd.read_csv(file_path)

data['Date'] = pd.to_datetime(data['Date'], errors='coerce')

data = data.dropna(subset=['Date'])

data['YearMonth'] = data['Date'].dt.to_period('M')
monthly_counts = data.groupby('YearMonth').size()

plt.figure(figsize=(12, 6))
monthly_counts.plot(kind='line', marker='o')
plt.title("Number of Enforcement Actions Over Time (Since January 2021)", fontsize=14)
plt.xlabel("Year-Month", fontsize=12)
plt.ylabel("Number of Actions", fontsize=12)
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()

plt.savefig("/Users/hahei/Desktop/enforcement_actions_plot.png")
plt.show()

```

### 2. Plot the number of enforcement actions categorized: (PARTNER 1)

* based on "Criminal and Civil Actions" vs. "State Enforcement Agencies"

```{python}

```

* based on five topics

```{python}

```

## Step 4: Create maps of enforcement activity

### 1. Map by State (PARTNER 1)

```{python}

```


### 2. Map by District (PARTNER 2)

```{python}

```

## Extra Credit

### 1. Merge zip code shapefile with population
```{python}

```

### 2. Conduct spatial join
```{python}

```

### 3. Map the action ratio in each district
```{python}

```